const e={A:"Anchor",Caption:"TableCaption",DL:"DList",Dir:"Directory",Img:"Image",OL:"OList",P:"Paragraph",TR:"TableRow",UL:"UList",Article:"",Aside:"",Footer:"",Header:"",Main:"",Nav:"",Element:"",H1:"Heading",H2:"Heading",H3:"Heading",H4:"Heading",H5:"Heading",H6:"Heading",TD:"TableCell",TH:"TableCell",TBody:"TableSection",TFoot:"TableSection",THead:"TableSection"},t=Symbol("extends"),{customElements:a}=self,{define:s}=a,n=new Map,o=(e,o)=>{const c=[e,o];return t in o&&c.push({extends:o[t].toLowerCase()}),s.apply(a,c),n.set(o,e),o},c=(e,t)=>t?o(e,t):t=>o(e,t),l=new Proxy(new Map,{get(a,s){if(!a.has(s)){const c=self[(o=s,"HTML"+(o in e?e[o]:o)+"Element")];a.set(s,"Element"===s?class extends c{}:class extends c{static get[t](){return s}constructor(){super().hasAttribute("is")||this.setAttribute("is",n.get(this.constructor))}})}var o;return a.get(s)}}),i=new Map,r=new WeakMap;function*d(e,t){const{behaviors:a,classList:s}=r.get(e);for(const e of t||s)if(i.has(e))for(const t of i.get(e))yield[a,t]}const b=e=>class extends e{static get observedAttributes(){return["class"]}constructor(){r.set(super(),{behaviors:new Map,classList:[]})}connectedCallback(){g(this,"connectedCallback",!0)}disconnectedCallback(){g(this,"disconnectedCallback",!1)}attributeChangedCallback(){let e=!1;const t=this,a=r.get(t),{classList:s}=a,n=new Set(s);(a.classList=[...t.classList]).forEach(n.delete,n);for(const[a,s]of d(t))if(!a.has(s)){e=!0;const n={mo:null,live:!1};a.set(s,n),"attachedCallback"in s&&s.attachedCallback(t);let{observedAttributes:o}=s;if(o||"attributeChangedCallback"in s){n.mo=new MutationObserver(u),n.mo.observe(t,{attributeOldValue:!0,attributes:!0,attributeFilter:o});const e=[];for(const a of o||[...t.attributes].map((({name:e})=>e)))t.hasAttribute(a)&&e.push({target:t,attributeName:a,oldValue:null});u(e,n.mo)}}e&&t.isConnected&&g(t,"connectedCallback",e),f(t,n)}},u=(e,t)=>{for(const{target:a,attributeName:s,oldValue:n}of e){const{behaviors:e}=r.get(a);for(const[o,{mo:c}]of e.entries())c===t&&"attributeChangedCallback"in o&&o.attributeChangedCallback(a,s,n,a.getAttribute(s))}},f=(e,t)=>{for(const[a,s]of d(e,t))if(a.has(s)){const{mo:t,live:n}=a.get(s);t&&t.disconnect(),a.delete(s),n&&"disconnectedCallback"in s&&s.disconnectedCallback(e),"detachedCallback"in s&&s.detachedCallback(e)}},g=(e,t,a)=>{for(const[s,n]of d(e))if(t in n){const o=s.get(n);o.live!==a&&(o.live=a,n[t](e))}},h=new Set;for(const e of Object.getOwnPropertyNames(self))if(/^HTML(.*?)Element$/.test(e)){const e=l[RegExp.$1||"Element"];let a="p-cool";if(t in e&&(a+="-"+e[t].toLowerCase()),!h.has(a)){h.add(a);try{c(a,b(e))}catch(e){}}}const C=(e,t,a=document)=>{((e,t)=>{i.has(e)||i.set(e,new Set),i.get(e).add(t)})(e,t);const s=`p-cool.${e},[is^="p-cool"].${e}`;for(const e of a.querySelectorAll(s))"attributeChangedCallback"in e&&e.attributeChangedCallback()};export{C as define};
